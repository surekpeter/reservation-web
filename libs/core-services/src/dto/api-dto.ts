/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] }

export interface paths {
  '/timer/unregister': {
    post: operations['unregisterTimers']
  }
  '/timer/unregister-all': {
    post: operations['unregisterAllClinicalTrialTimers']
  }
  '/timer/register': {
    post: operations['registerTimer']
  }
  '/timer/execute': {
    post: operations['executeTimers']
  }
  '/timer-configuration': {
    post: operations['registerConfiguration']
  }
  '/log': {
    post: operations['log']
  }
  '/email/recruiter': {
    post: operations['sendRecruiterEmail']
  }
  '/email/recipient-id/{userId}/patient-notification': {
    post: operations['sendPatientEmail']
  }
  '/email/recipient-id/{userId}/hub-notification': {
    post: operations['sendHubEmailAboutDelivery']
  }
  '/email/recipient-id/{userId}/delivery-notification': {
    post: operations['sendDeliveryEmail']
  }
  '/email/courier': {
    post: operations['sendCourierEmail']
  }
  '/email/cognito-data': {
    post: operations['sendCognitoDataEmail']
  }
  '/email/candidate': {
    post: operations['sendCandidateEmail']
  }
  '/email/admin/delivery-notification': {
    post: operations['sendAdminDeliveryEmail']
  }
  '/content-resource/raw-email-preview/{notificationIdentification}': {
    post: operations['renderRawEmailHtmlResponseWithData']
  }
  '/content-resource/email-preview/{notificationIdentification}': {
    get: operations['renderEmailHtmlResponse']
    post: operations['renderEmailHtmlResponseWithData']
  }
  '/cache/evict/s3_text': {
    post: operations['clearTextCaches']
  }
  '/v1/delivery-survey': {
    get: operations['getSurvey']
  }
  '/v1/content-resource/faq/{faqIdentifier}': {
    get: operations['renderFaqHtmlResponse']
  }
  '/v1/content-resource/about_clinical_trial': {
    get: operations['renderAboutClinicalTrialHtmlResponse']
  }
  '/user-pool/web-app-user': {
    get: operations['resolveUserPoolForWebAppUser']
  }
  '/user-pool/admin-user': {
    get: operations['resolveUserPoolForAdminUser']
  }
  '/timer-configuration/{ctIdentifier}': {
    get: operations['getTimerConfigurationsForClinicalTrial']
  }
  '/text': {
    get: operations['getText']
  }
  '/text/{domain}': {
    get: operations['getTextForCurrentUser']
  }
  '/text/all-languages/{domain}': {
    get: operations['getTextForAllLanguages']
  }
  '/ping': {
    get: operations['getPing']
  }
  '/delivery-survey': {
    get: operations['getSurvey_1']
  }
  '/current-user': {
    get: operations['getCurrentUserInfo']
  }
  '/content-resource/faq/{faqIdentifier}': {
    get: operations['renderFaqHtmlResponse_1']
  }
  '/content-resource/about_clinical_trial': {
    get: operations['renderAboutClinicalTrialHtmlResponse_1']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    TimerDto: {
      /** Format: uuid */
      targetId: string
      timerType: string
    }
    RegisterTimerDto: {
      /** Format: uuid */
      targetId: string
      timerType: string
      payload?: string
      defaultConfig?: components['schemas']['TimerDefaultConfigDto']
    }
    TimerDefaultConfigDto: {
      /** Format: int32 */
      numOfRepetitions: number
      /** Format: int64 */
      periodInHours: number
    }
    TimerConfigurationNewDto: {
      timerType: string
      /** Format: int32 */
      repetitions: number
      /** Format: int32 */
      periodInHours: number
    }
    ClientLog: {
      message: string
      /** @enum {string} */
      level: 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'FATAL' | 'OFF'
    }
    RecruiterEmailData: {
      /** @enum {string} */
      notificationCode:
        | 'N1'
        | 'N2'
        | 'N3'
        | 'N3B'
        | 'N4'
        | 'N4a'
        | 'N5'
        | 'N9'
        | 'N8'
        | 'N17'
        | 'N20'
        | 'N25'
        | 'N26'
        | 'N27'
        | 'N29'
        | 'N32'
        | 'N32a'
        | 'N33a'
        | 'N33b'
        | 'N33c'
        | 'N40'
        | 'N43'
        | 'N50'
        | 'N51'
        | 'N52'
        | 'N88'
        | 'N99'
        | 'N100'
        | 'N200'
        | 'N201'
        | 'N300'
        | 'DELIVERY_ERROR'
      recipientName: string
      /** @description Validated against validation rules for email address of Jakarta Bean Validation providers */
      recipientEmail: string
    }
    PatientEmailData: WithRequired<
      {
        type: 'PatientEmailData'
      } & Omit<components['schemas']['EmailData'], 'type'> & {
          recipientName?: string
          /** @description Validated against validation rules for email address of Jakarta Bean Validation providers */
          recipientEmail?: string
          /** @description <b>Cognito username format:</b> https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminCreateUser.html */
          pid?: string
        },
      'notificationCode' | 'pid' | 'recipientEmail' | 'recipientName'
    >
    HubEmailAboutDeliveryData: WithRequired<
      {
        type: 'HubEmailAboutDeliveryData'
      } & Omit<components['schemas']['EmailData'], 'type'> & {
          recipientName?: string
          /** @description Validated against validation rules for email address of Jakarta Bean Validation providers */
          recipientEmail?: string
          /** Format: uuid */
          deliveryId?: string
        },
      'deliveryId' | 'notificationCode' | 'recipientEmail' | 'recipientName'
    >
    DeliveryEmailData: WithRequired<
      {
        type: 'DeliveryEmailData'
      } & Omit<components['schemas']['EmailData'], 'type'> & {
          recipientName?: string
          /** @description Validated against validation rules for email address of Jakarta Bean Validation providers */
          recipientEmail?: string
          /** Format: uuid */
          deliveryId?: string
          /** @description <b>Cognito username format:</b> https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminCreateUser.html */
          pid?: string
        },
      'deliveryId' | 'notificationCode' | 'pid' | 'recipientEmail' | 'recipientName'
    >
    CourierEmailData: WithRequired<
      {
        type: 'CourierEmailData'
      } & Omit<components['schemas']['EmailData'], 'type'> & {
          recipientName?: string
          /** @description Validated against validation rules for email address of Jakarta Bean Validation providers */
          recipientEmail?: string
          investigatorEmails?: string[]
          pickupAddress?: string
          pickupContactDetails?: string
          recipientAddress?: string
          recipientContactDetails?: string
          /** Format: uuid */
          deliveryId?: string
          /** Format: int32 */
          numOfPackages?: number
          /** Format: double */
          weightInKg?: number
          /** Format: int32 */
          dim1InMM?: number
          /** Format: int32 */
          dim2InMM?: number
          /** Format: int32 */
          dim3InMM?: number
          expectedDeliveryDate?: string
          noteForCourier?: string
          noteForRecipient?: string
        },
      | 'deliveryId'
      | 'dim1InMM'
      | 'dim2InMM'
      | 'dim3InMM'
      | 'expectedDeliveryDate'
      | 'investigatorEmails'
      | 'notificationCode'
      | 'numOfPackages'
      | 'pickupAddress'
      | 'pickupContactDetails'
      | 'recipientAddress'
      | 'recipientContactDetails'
      | 'recipientEmail'
      | 'recipientName'
      | 'weightInKg'
    >
    CognitoEmailData: {
      cognitoUserName: string
      recipientEmail: string
      /** @enum {string} */
      notificationCode:
        | 'N1'
        | 'N2'
        | 'N3'
        | 'N3B'
        | 'N4'
        | 'N4a'
        | 'N5'
        | 'N9'
        | 'N8'
        | 'N17'
        | 'N20'
        | 'N25'
        | 'N26'
        | 'N27'
        | 'N29'
        | 'N32'
        | 'N32a'
        | 'N33a'
        | 'N33b'
        | 'N33c'
        | 'N40'
        | 'N43'
        | 'N50'
        | 'N51'
        | 'N52'
        | 'N88'
        | 'N99'
        | 'N100'
        | 'N200'
        | 'N201'
        | 'N300'
        | 'DELIVERY_ERROR'
      recipientName: string
      type: string
    }
    CognitoNewPasswordEmailData: WithRequired<
      {
        type: 'CognitoNewPasswordEmailData'
      } & Omit<components['schemas']['CognitoEmailData'], 'type'> & {
          recipientName?: string
          /** @description Validated against validation rules for email address of Jakarta Bean Validation providers */
          recipientEmail?: string
          cognitoUserName?: string
          password?: string
        },
      'cognitoUserName' | 'notificationCode' | 'password' | 'recipientEmail' | 'recipientName'
    >
    CognitoUpdatedValueData: WithRequired<
      {
        type: 'CognitoUpdatedValueData'
      } & Omit<components['schemas']['CognitoEmailData'], 'type'> & {
          recipientName?: string
          /** @description Validated against validation rules for email address of Jakarta Bean Validation providers */
          recipientEmail?: string
          cognitoUserName?: string
          updatedValue?: string
        },
      'cognitoUserName' | 'notificationCode' | 'recipientEmail' | 'recipientName' | 'updatedValue'
    >
    CandidateEmailData: WithRequired<
      {
        type: 'CandidateEmailData'
      } & Omit<components['schemas']['EmailData'], 'type'> & {
          recipientName?: string
          /** @description Validated against validation rules for email address of Jakarta Bean Validation providers */
          recipientEmail?: string
          /** Format: uuid */
          candidateId?: string
          /** Format: uuid */
          consentTokenId?: string
        },
      'candidateId' | 'consentTokenId' | 'notificationCode' | 'recipientEmail' | 'recipientName'
    >
    EmailData: {
      recipientEmail: string
      /** @enum {string} */
      notificationCode:
        | 'N1'
        | 'N2'
        | 'N3'
        | 'N3B'
        | 'N4'
        | 'N4a'
        | 'N5'
        | 'N9'
        | 'N8'
        | 'N17'
        | 'N20'
        | 'N25'
        | 'N26'
        | 'N27'
        | 'N29'
        | 'N32'
        | 'N32a'
        | 'N33a'
        | 'N33b'
        | 'N33c'
        | 'N40'
        | 'N43'
        | 'N50'
        | 'N51'
        | 'N52'
        | 'N88'
        | 'N99'
        | 'N100'
        | 'N200'
        | 'N201'
        | 'N300'
        | 'DELIVERY_ERROR'
      recipientName: string
      type: string
    }
    Survey_V1: {
      questions: string[]
    }
    UserPool: {
      userPoolId: string
      clientId?: string
    }
    TimerConfigurationDto: {
      /** Format: uuid */
      id: string
      timerType: string
      /** Format: int32 */
      repetitions: number
      /** Format: int32 */
      periodInHours: number
      /** Format: date-time */
      changedAt: string
      /** Format: date-time */
      createdAt: string
    }
    Survey: {
      questions: string[]
    }
    CurrentUser: {
      userName: string
      /** @enum {string} */
      authRole?: 'SUPER_ADMIN' | 'CT_ADMIN' | 'PATIENT' | 'WEB_APPS_OPERATOR'
      personRolesInClinicalTrials: components['schemas']['PersonRoleInClinicalTrial'][]
    }
    PersonRoleInClinicalTrial: {
      /** @enum {string} */
      personRole:
        | 'SUPER_ADMIN'
        | 'CT_EDITOR'
        | 'CT_REVIEWER'
        | 'RECRUITER'
        | 'INVESTIGATOR'
        | 'NURSE'
        | 'PATIENT'
        | 'BLINDED_HUB_OPERATOR'
        | 'UNBLINDED_HUB_OPERATOR'
        | 'IRT'
      clinicalTrial: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  unregisterTimers: {
    parameters: {
      header: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TimerDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  unregisterAllClinicalTrialTimers: {
    parameters: {
      header: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  registerTimer: {
    parameters: {
      header: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterTimerDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  executeTimers: {
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  registerConfiguration: {
    parameters: {
      header: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TimerConfigurationNewDto']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  log: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ClientLog']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  sendRecruiterEmail: {
    parameters: {
      header: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RecruiterEmailData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  sendPatientEmail: {
    parameters: {
      header: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
      path: {
        userId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatientEmailData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  sendHubEmailAboutDelivery: {
    parameters: {
      header: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
      path: {
        userId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HubEmailAboutDeliveryData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  sendDeliveryEmail: {
    parameters: {
      header: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
      path: {
        userId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeliveryEmailData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  sendCourierEmail: {
    parameters: {
      header: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourierEmailData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  sendCognitoDataEmail: {
    parameters: {
      header?: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial?: string
      }
    }
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['CognitoNewPasswordEmailData']
          | components['schemas']['CognitoUpdatedValueData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  sendCandidateEmail: {
    parameters: {
      header?: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial?: string
      }
    }
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['CandidateEmailData']
          | components['schemas']['CourierEmailData']
          | components['schemas']['DeliveryEmailData']
          | components['schemas']['HubEmailAboutDeliveryData']
          | components['schemas']['PatientEmailData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  sendAdminDeliveryEmail: {
    parameters: {
      header: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeliveryEmailData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  renderRawEmailHtmlResponseWithData: {
    parameters: {
      path: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 256<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        notificationIdentification: string
      }
    }
    requestBody?: {
      content: {
        'application/json':
          | components['schemas']['CandidateEmailData']
          | components['schemas']['CourierEmailData']
          | components['schemas']['DeliveryEmailData']
          | components['schemas']['HubEmailAboutDeliveryData']
          | components['schemas']['PatientEmailData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/html': string
        }
      }
    }
  }
  renderEmailHtmlResponse: {
    parameters: {
      path: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 256<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        notificationIdentification: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/html': string
        }
      }
    }
  }
  renderEmailHtmlResponseWithData: {
    parameters: {
      path: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 256<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        notificationIdentification: string
      }
    }
    requestBody?: {
      content: {
        'application/json':
          | components['schemas']['CandidateEmailData']
          | components['schemas']['CourierEmailData']
          | components['schemas']['DeliveryEmailData']
          | components['schemas']['HubEmailAboutDeliveryData']
          | components['schemas']['PatientEmailData']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/html': string
        }
      }
    }
  }
  clearTextCaches: {
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  getSurvey: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Survey_V1']
        }
      }
    }
  }
  renderFaqHtmlResponse: {
    parameters: {
      path: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 256<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        faqIdentifier: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/html': string
        }
      }
    }
  }
  renderAboutClinicalTrialHtmlResponse: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/html': string
        }
      }
    }
  }
  resolveUserPoolForWebAppUser: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserPool']
        }
      }
    }
  }
  resolveUserPoolForAdminUser: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserPool']
        }
      }
    }
  }
  getTimerConfigurationsForClinicalTrial: {
    parameters: {
      path: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 320<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        ctIdentifier: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['TimerConfigurationDto'][]
        }
      }
    }
  }
  getText: {
    parameters: {
      query: {
        /** @description Domains - units/scopes into which text translation are organized. More on https://github.com/Meliovit/documentation/wiki/Localization#domains <br /> Can not be blank <br /> Min: 2<br/>Max: 128<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        domain: string
        /** @description <b>Pattern:</b> <code>^[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]{1,128}$</code> */
        username: string
      }
      header?: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  getTextForCurrentUser: {
    parameters: {
      header?: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial?: string
      }
      path: {
        /** @description Domains - units/scopes into which text translation are organized. More on https://github.com/Meliovit/documentation/wiki/Localization#domains <br /> Can not be blank <br /> Min: 2<br/>Max: 128<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        domain: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  getTextForAllLanguages: {
    parameters: {
      header?: {
        /** @description Min: 2<br/>Max: 320<br/> */
        ClinicalTrial?: string
      }
      path: {
        /** @description Domains - units/scopes into which text translation are organized. More on https://github.com/Meliovit/documentation/wiki/Localization#domains <br /> Can not be blank <br /> Min: 2<br/>Max: 128<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        domain: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': {
            [key: string]: {
              [key: string]: string
            }
          }
        }
      }
    }
  }
  getPing: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  getSurvey_1: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Survey']
        }
      }
    }
  }
  getCurrentUserInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CurrentUser']
        }
      }
    }
  }
  renderFaqHtmlResponse_1: {
    parameters: {
      path: {
        /** @description Can not be blank <br /> Min: 2<br/>Max: 256<br/> <br /> <b>Pattern:</b> <code>^[0-9a-zA-Z\\-\\_]{2,}$</code> */
        faqIdentifier: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/html': string
        }
      }
    }
  }
  renderAboutClinicalTrialHtmlResponse_1: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'text/html': string
        }
      }
    }
  }
}
